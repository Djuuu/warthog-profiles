
include "Dju_FC3_A-10A_Macros.ttm"
include "Dju_TrackIR_Macros.ttm"

// Useful arrays **************************************************************
int LedArray[] = {LED0, LED1, LED2, LED3, LED4, LED5};
int IdleSwitch[] = {IDLELON, IDLERON};
int EngineCommand[4];

// Custom actions **************************************************************

int SensorCurveM, SensorCurveL;	 // Custom curves for slew control
int ZoomInCustom, ZoomOutCustom; // Custom zoom functions, changing slew control curves

int LandingGearUpCustom, LandingGearDownCustom;         // With LED indicator
int AirbrakeOnCustom, AirbrakeOffCustom;                // With LED indicator
int ModeAACustom, ModeAGCustom, ModeNavCustom;          // With LED indicator
int FlapsUpCustom, FlapsDownCustom, FlapsLandingCustom; // With LED indicator

int BaclightLow, BaclightHigh; // Backlight intensity setting

// Flags **************************************************************

char Autopilot_Status;
char Engine_Status[2];
char ExtView;


// Custom functions **************************************************************

// init function
int initCustomCommands()
{
    printf("Dju_FC3_lib.tmc init \xa");

    EngineCommand[0] = Engine_Left_Stop;   // (Left  << 1) | Stop
    EngineCommand[1] = Engine_Left_Start;  // (Left  << 1) | Start
    EngineCommand[2] = Engine_Right_Stop;  // (Right << 1) | Stop
    EngineCommand[3] = Engine_Right_Start; // (Right << 1) | Start

    // Flag init
    Autopilot_Status = 0;
    Engine_Status[Left] = 0;
    Engine_Status[Right] = 0;

    ExtView = 0;

    // Custom commands init
    SensorCurveM = LIST(0,32, 45,50, 55,50, 100,68); // Medium sensitivity curve for sensor control
    SensorCurveL = LIST(0,40, 45,50, 55,50, 100,60); // Low sensitivity curve used when sensor is zoomed in
    ZoomInCustom = CHAIN(PULSE+Display_Zoom_In,
                         EXEC("SetCustomCurve(&Throttle, SCX, SensorCurveL);",
                              "SetCustomCurve(&Throttle, SCY, SensorCurveL);"));
    ZoomOutCustom = CHAIN(PULSE+Display_Zoom_Out,
                         EXEC("SetCustomCurve(&Throttle, SCX, SensorCurveM);",
                              "SetCustomCurve(&Throttle, SCY, SensorCurveM);"));

    AirbrakeOnCustom  = CHAIN( PULSE+Airbrake_On,  D(), LedOn(3));
    AirbrakeOffCustom = CHAIN( PULSE+Airbrake_Off, D(), LedOff(3));

    FlapsUpCustom      = CHAIN( PULSE+Flaps_Up,               D(), LedOff(4));
    FlapsDownCustom    = CHAIN( PULSE+Flaps_Up_Down,          D(), LedOn(4));
    FlapsLandingCustom = CHAIN( PULSE+Flaps_Landing_Position, D(), LedOn(4));

    LandingGearUpCustom   = CHAIN( PULSE+Landing_Gear_Up,   D(), EXEC("BlinkToOff(5);"));
    LandingGearDownCustom = CHAIN( PULSE+Landing_Gear_Down, D(), EXEC("BlinkToOn(5);"));

    ModeAACustom  = CHAIN( PULSE+_6__Longitudinal_Missile_Aiming_Mode, D(), LedOn(1),  LedOff(2));
    ModeAGCustom  = CHAIN( PULSE+_7__Air_To_Ground_Mode,               D(), LedOn(1),  LedOn(2));
    ModeNavCustom = CHAIN( PULSE+_1__Navigation_Modes,                 D(), LedOff(1), LedOff(2));

    // 43, 86, 129, 172, 215
    BaclightLow  = LED(&Throttle, LED_INTENSITY, 43);
    BaclightHigh = LED(&Throttle, LED_INTENSITY, 172);
}


// Sets view to external view
int setExtView(int view)
{
    ActKey(KEYON+PULSE+view);
    if (view != F1_Cockpit_view) {
        ExtView = 1;
    }
}
// Resets view to F1 internal view
int resetView()
{
    if (ExtView == 1) {
        ActKey(KEYON+PULSE+F1_Cockpit_view);
        ExtView = 0;
    }
}

// Engine start / stop
int setEngine(int engine, int status, int checkThrottle=0)
{
    int command = EngineCommand[(engine<<1)|status];

    if (status == Start) {
        if(!(checkThrottle) | !(Throttle[IdleSwitch[engine]])) {
            ActKey(KEYON+PULSE+command);
            if (Engine_Status[engine] == Stop) {
                Engine_Status[engine] = status;
            }
        }
    }
    else {
        ActKey(KEYON+PULSE+command);
        Engine_Status[engine] = status;
    }

    updateBacklight();
}
// Afterburner indication
int setAfterburner(int engine, int on)
{
    if (Engine_Status[engine] == Stop) return 0;
    if (on & Engine_Status[engine] == Start) {
        Engine_Status[engine] = AftB;
    }
    else if(!on & Engine_Status[engine] == AftB) {
        Engine_Status[engine] = Start;
    }

    updateBacklight();
}

// Turns LED i on (command)
int LedOn(int i)
{
    return LED(&Throttle, LED_ONOFF, LED_CURRENT+LedArray[i]);
}
// Turns LED i off (command)
int LedOff(int i)
{
    return LED(&Throttle, LED_ONOFF, LED_CURRENT-LedArray[i]);
}
// Turns LED i on with blinking transition (function)
int BlinkToOn(int i, int duration=3000)
{
    int step = 250;
    int time = 0;
    ActKey(KEYON+PULSE+LedOn(0));
    while (time<duration) {
        time = time + step;
        DeferCall(time, &ActKey, KEYON+PULSE+LedOff(i));
        time = time + step;
        DeferCall(time, &ActKey, KEYON+PULSE+LedOn(i));
    }
}
// Turns LED i on with blinking transition (function)
int BlinkToOff(int i, int duration=3000)
{
    int step = 250;
    int time = 0;
    ActKey(KEYON+PULSE+LedOff(0));
    while (time<duration) {
        time = time + step;
        DeferCall(time, &ActKey, KEYON+PULSE+LedOn(i));
        time = time + step;
        DeferCall(time, &ActKey, KEYON+PULSE+LedOff(i));
    }
}

// Engine power indication
int updateBacklight()
{
    if ((Engine_Status[Left] == 0) & (Engine_Status[Right] == 0)) {
        ActKey(KEYON+PULSE+LedOff(0)); // OFF
    }
    else {
        ActKey(KEYON+PULSE+LedOn(0)); // ON
        if ((Engine_Status[Left] == 2) | (Engine_Status[Right] == 2)) {
            ActKey(KEYON+PULSE+BaclightHigh); // Afterburner
        }
        else {
            ActKey(KEYON+PULSE+BaclightLow); // standard
        }
    }
}

// Autopilot function, depending on LASTE switches states
int autopilotEngage()
{
         if(Throttle[APPAT])   ActKey(KEYON+PULSE+Autopilot_Route_following);          // PATH
    else if (Throttle[APAH])   ActKey(KEYON+PULSE+Autopilot_Altitude_And_Roll_Hold);   // ALT/HDG
    else if (Throttle[RDRDIS]) ActKey(KEYON+PULSE+Autopilot_Barometric_Altitude_Hold); // ALT (baro)
    else if (Throttle[RDRNRM]) ActKey(KEYON+PULSE+Autopilot_Radar_Altitude_Hold);      // ALT (radar)
    Autopilot_Status = 1;
}
int autopilotDisengage()
{
    ActKey(KEYON+PULSE+Autopilot_Disengage);
    Autopilot_Status = 0;
}
int autopilotToggle()
{
    if (Autopilot_Status) autopilotDisengage();
    else                  autopilotEngage();
}


include "Dju_FC3_A-10A_Macros.ttm"
include "Dju_TrackIR_Macros.ttm"

// Custom actions **************************************************************

int SensorCurveM, SensorCurveL;	 // Custom curves for slew control
int ZoomInCustom, ZoomOutCustom; // Custom zoom functions, changing slew control curves

int LandingGearUpCustom, LandingGearDownCustom;         // With LED indicator
int AirbrakeOnCustom, AirbrakeOffCustom;                // With LED indicator
int ModeAACustom, ModeAGCustom, ModeNavCustom;          // With LED indicator
int FlapsUpCustom, FlapsDownCustom, FlapsLandingCustom; // With LED indicator

int AutopilotToggle; // Autopilot toggle

int BaclightLow, BaclightHigh; // Backlight intensity setting

int LedArray[6] = {LED0, LED1, LED2, LED3, LED4, LED5};

// Flags **************************************************************

char Autopilot_Status;
char Engine_Left_Status, Engine_Right_Status;

// Custom functions **************************************************************

int setEngine(int engine, int status, int checkThrottle=0)
{
    if (engine == Engine_Left) {
        if (status == 1) {
            if(!(checkThrottle) | !(Throttle[IDLELON])) {
                ActKey(KEYON+PULSE+Engine_Left_Start);
                if (Engine_Left_Status == 0) {
                    Engine_Left_Status = 1;
                }
            }
        } else {
            ActKey(KEYON+PULSE+Engine_Left_Stop);
            Engine_Left_Status = 0;
        }
    } else {
        if (status == 1) {
            if(!(checkThrottle) | !(Throttle[IDLERON])) {
                ActKey(KEYON+PULSE+Engine_Right_Start);
                if (Engine_Right_Status == 0) {
                    Engine_Right_Status = 1;
                }
            }
        } else {
            ActKey(KEYON+PULSE+Engine_Right_Stop);
            Engine_Right_Status = 0;
        }
    }
    updateBacklight();
}

// Afterburner indication
int setAfterburner(int engine, int status)
{
    if (engine == Engine_Left) {
        if (Engine_Left_Status == 0) return 0;
        Engine_Left_Status = status + 1;
    } else {
        if (Engine_Right_Status == 0) return 0;
        Engine_Right_Status = status + 1;
    }
    updateBacklight();
}

// Turns LED i on (command)
int LedOn(int i)
{
    return LED(&Throttle, LED_ONOFF, LED_CURRENT+LedArray[i]);
}
// Turns LED i off (command)
int LedOff(int i)
{
    return LED(&Throttle, LED_ONOFF, LED_CURRENT-LedArray[i]);
}

// Engine power indication
int updateBacklight()
{
    if ((Engine_Left_Status == 0) & (Engine_Right_Status == 0)) {
        ActKey(KEYON+PULSE+LedOff(0)); // OFF
    }
    else {
        ActKey(KEYON+PULSE+LedOn(0)); // ON
        if ((Engine_Left_Status == 2) | (Engine_Right_Status == 2)) {
            ActKey(KEYON+PULSE+BaclightHigh); // Afterburner
        }
        else {
            ActKey(KEYON+PULSE+BaclightLow); // standard
        }
    }
}

// Autopilot function, depending on LASTE switches states
int autopilotEngage()
{
    if(Throttle[APPAT])                          ActKey(KEYON+PULSE+Autopilot_Route_following);             // PATH
    else if(Throttle[APALT] & Throttle[RDRDIS])  ActKey(KEYON+PULSE+Autopilot_Barometric_Altitude_Hold); // ALT (baro)
    else if (Throttle[APALT] & Throttle[RDRNRM]) ActKey(KEYON+PULSE+Autopilot_Radar_Altitude_Hold);  // ALT (radar)
    else                                         ActKey(KEYON+PULSE+Autopilot_Altitude_And_Roll_Hold); // APAH
    Autopilot_Status = !Autopilot_Status;
}

// init function
int initCustomCommands()
{
    // Flag init
    Autopilot_Status = 0;
    Engine_Left_Status = 0;
    Engine_Right_Status = 0;

    // Custom commands init
    SensorCurveM = LIST(0,32, 45,50, 55,50, 100,68); // Medium sensitivity curve for sensor control
    SensorCurveL = LIST(0,40, 45,50, 55,50, 100,60); // Low sensitivity curve used when sensor is zoomed in
    ZoomInCustom = CHAIN(PULSE+Display_Zoom_In,
                         EXEC("SetCustomCurve(&Throttle, SCX, SensorCurveL);",
                              "SetCustomCurve(&Throttle, SCY, SensorCurveL);"));
    ZoomOutCustom = CHAIN(PULSE+Display_Zoom_Out,
                         EXEC("SetCustomCurve(&Throttle, SCX, SensorCurveM);",
                              "SetCustomCurve(&Throttle, SCY, SensorCurveM);"));

    AirbrakeOnCustom  = CHAIN( PULSE+Airbrake_On,  D(), LedOn(3));
    AirbrakeOffCustom = CHAIN( PULSE+Airbrake_Off, D(), LedOff(3));

    // 43, 86, 129, 172, 215
    BaclightLow  = LED(&Throttle, LED_INTENSITY, 43);
    BaclightHigh = LED(&Throttle, LED_INTENSITY, 172);
}

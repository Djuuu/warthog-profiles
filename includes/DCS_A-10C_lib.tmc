
// Macros
include "includes/DCS_A-10C_Macros.ttm"
include "includes/TrackIR_Macros.ttm"

// Libs
include "includes/DCS_FC3_SnapViews.tmc"
include "includes/Warthog_leds.tmc"

// Useful constants and arrays **************************************************************

define Engine_Left  0
define        Left  0

define Engine_Right 1
define        Right 1

define        Stop  0
define        Start 1
define        AftB  2


int IdleSwitch[] = {IDLELON, IDLERON};
int EngineLed[] = {4, 5}; // Engine Left LED / Engine Right LED


// Custom actions **************************************************************

int AirbrakeOnCustom, AirbrakeOffCustom;                // With LED indicator
int FlapsUpCustom, FlapsDownCustom, FlapsLandingCustom; // With LED indicator
int LandingGearUpCustom, LandingGearDownCustom;         // With LED indicator


// Flags **************************************************************

char Engine_Status[2];
char ExtView;


// Custom functions **************************************************************

// init function
int initCustomCommands()
{
    printf("Dju_A-10C_lib.tmc init \xa");

    AirbrakeOnCustom  = CHAIN( EXEC("BlinkToOn(1, 1500);"));
    AirbrakeOffCustom = CHAIN( EXEC("BlinkToOff(1, 1500);"));

    FlapsUpCustom      = CHAIN(EXEC("BlinkToOff(2);"));
    FlapsDownCustom    = CHAIN(EXEC("BlinkToOn(2);"));
    FlapsLandingCustom = CHAIN(EXEC("BlinkToOn(2);"));

    LandingGearUpCustom   = CHAIN( PULSE+Landing_Gear_Up,   D(), EXEC("BlinkToOff(3, 2500);"));
    LandingGearDownCustom = CHAIN( PULSE+Landing_Gear_Down, D(), EXEC("BlinkToOn(3, 2500);"));

    // Flag init
    Engine_Status[Left] = 0;
    Engine_Status[Right] = 0;

    // 43, 86, 129, 172, 215
    BaclightLow  = LED(&Throttle, LED_INTENSITY, 43);
    BaclightHigh = LED(&Throttle, LED_INTENSITY, 172);
}

// Engine start / stop
// Checks if engine can be started and keeps track of engine status
int setEngine(int engine, int status, int checkThrottle=0)
{
    // If status is Start, checks if the enfine is fueled
    if (  status == Start
        & checkThrottle
        & Throttle[IdleSwitch[engine]]) { return 0;}

    doSetEngine(engine, status);
}

// Engine start / stop
int doSetEngine(int engine, int status)
{
    if(Engine_Status[engine] != status){
        BlinkToState(EngineLed[engine], status, 5000);
    }
    Engine_Status[engine] = status;

    updateBacklight();
}

// Engine power indication
int updateBacklight()
{
    if ((Engine_Status[Left] == 0) & (Engine_Status[Right] == 0)) {
        ActKey(KEYON+PULSE+LedOff(0)); // OFF
    }
    else {
        ActKey(KEYON+PULSE+LedOn(0)); // ON
        if ((Engine_Status[Left] == 2) | (Engine_Status[Right] == 2)) {
            ActKey(KEYON+PULSE+BaclightHigh); // Afterburner
        }
        else {
            ActKey(KEYON+PULSE+BaclightLow); // standard
        }
    }
}

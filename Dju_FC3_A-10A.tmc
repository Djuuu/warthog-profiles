include "target.tmh"

include "Dju_FC3_A-10A_Macros.ttm"
include "Dju_TrackIR_Macros.ttm"

// Custom actions **************************************************************

int SensorCurveM, SensorCurveL;	 // Custom curves for slew control
int ZoomInCustom, ZoomOutCustom; // Custom zoom functions, changing slew control curves

int LandingGearUpCustom, LandingGearDownCustom;         // With LED indicator
int AirbrakeOnCustom, AirbrakeOffCustom;                // With LED indicator
int ModeAACustom, ModeAGCustom, ModeNavCustom;          // With LED indicator
int FlapsUpCustom, FlapsDownCustom, FlapsLandingCustom; // With LED indicator

int AutopilotToggle; // Autopilot toggle

int BaclightLow, BaclightHigh; // Backlight intensity setting

int LedArray[6] = {LED0, LED1, LED2, LED3, LED4, LED5};

// Flags **************************************************************

char Autopilot_Status;
char Engine_Left_Status, Engine_Right_Status;

// Custom functions **************************************************************
int setEngine(int engine, int status, int checkThrottle=0)
{
    if (engine == Engine_Left) {
        if (status == 1) {
            if(!(checkThrottle) | !(Throttle[IDLELON])) {
                ActKey(KEYON+PULSE+Engine_Left_Start);
                if (Engine_Left_Status == 0) {
                    Engine_Left_Status = 1;
                }
            }
        } else {
            ActKey(KEYON+PULSE+Engine_Left_Stop);
            Engine_Left_Status = 0;
        }
    } else {
        if (status == 1) {
            if(!(checkThrottle) | !(Throttle[IDLERON])) {
                ActKey(KEYON+PULSE+Engine_Right_Start);
                if (Engine_Right_Status == 0) {
                    Engine_Right_Status = 1;
                }
            }
        } else {
            ActKey(KEYON+PULSE+Engine_Right_Stop);
            Engine_Right_Status = 0;
        }
    }
    updateBacklight();
}

int setAfterburner(int engine, int status)
{
    if (engine == Engine_Left) {
        if (Engine_Left_Status == 0) { return;}
        Engine_Left_Status = (status == 1) ? 2 : 1;
    } else {
        if (Engine_Right_Status == 0) { return;}
        Engine_Right_Status = (status == 1) ? 2 : 1;
    }
    updateBacklight();
}

int updateBacklight()
{
    if ((Engine_Left_Status == 0) & (Engine_Right_Status == 0)) {
        ActKey(KEYON+PULSE+LedOff(0)); // OFF
    }
    else {
        ActKey(KEYON+PULSE+LedOn(0)); // ON
        if ((Engine_Left_Status == 2) & (Engine_Right_Status == 2)) {
            ActKey(KEYON+PULSE+BaclightHigh); // Afterburner
        }
        else {
            ActKey(KEYON+PULSE+BaclightLow); // standard
        }
    }
}



// Autopilot function, depending on LASTE switches states
int autopilotEngage()
{
    if(Throttle[APPAT])                          ActKey(KEYON+PULSE+Autopilot_Route_following);             // PATH
    else if(Throttle[APALT] & Throttle[RDRDIS])  ActKey(KEYON+PULSE+Autopilot_Barometric_Altitude_Hold); // ALT (baro)
    else if (Throttle[APALT] & Throttle[RDRNRM]) ActKey(KEYON+PULSE+Autopilot_Radar_Altitude_Hold);  // ALT (radar)
    else                                         ActKey(KEYON+PULSE+Autopilot_Altitude_And_Roll_Hold); // APAH
    Autopilot_Status = !Autopilot_Status;
}

// Turns LED i on (command)
int LedOn(int i)
{
    return LED(&Throttle, LED_ONOFF, LED_CURRENT+LedArray[i]);
}
// Turns LED i off (command)
int LedOff(int i)
{
    return LED(&Throttle, LED_ONOFF, LED_CURRENT-LedArray[i]);
}


int initCustomCommands()
{
    // Flag init
    Autopilot_Status = 0;
    Engine_Left_Status = 0;
    Engine_Right_Status = 0;

    // Custom commands init
    SensorCurveM = LIST(0,32, 45,50, 55,50, 100,68); // Medium sensitivity curve for sensor control
    SensorCurveL = LIST(0,40, 45,50, 55,50, 100,60); // Low sensitivity curve used when sensor is zoomed in
    ZoomInCustom = CHAIN(PULSE+Display_Zoom_In,
                         EXEC("SetCustomCurve(&Throttle, SCX, SensorCurveL);",
                              "SetCustomCurve(&Throttle, SCY, SensorCurveL);"));
    ZoomOutCustom = CHAIN(PULSE+Display_Zoom_Out,
                         EXEC("SetCustomCurve(&Throttle, SCX, SensorCurveM);",
                              "SetCustomCurve(&Throttle, SCY, SensorCurveM);"));

    AirbrakeOnCustom  = CHAIN( PULSE+Airbrake_On,  D(), LedOn(3));
    AirbrakeOffCustom = CHAIN( PULSE+Airbrake_Off, D(), LedOff(3));

    // 43, 86, 129, 172, 215
    BaclightLow  = LED(&Throttle, LED_INTENSITY, 43);
    BaclightHigh = LED(&Throttle, LED_INTENSITY, 172);
}


// ****************************************************************************************************************************
// Main
// ****************************************************************************************************************************
int main()
{
    if(Init(&EventHandle)) return 1;

    initCustomCommands();

    // Init **************************************************************
    Configure(&HCougar, MODE_EXCLUDED);
    Configure(&T16000, MODE_EXCLUDED);
    Configure(&LMFD, MODE_EXCLUDED);
    Configure(&RMFD, MODE_EXCLUDED);

    SetKBRate(50, 50);
    SetKBLayout(KB_ENG);
    SetShiftButton(&Joystick, S4, &Throttle, BSF, BSB, 0);

    // Axes **************************************************************

    MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_REVERSED, MAP_RELATIVE);
    MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_REVERSED, MAP_RELATIVE);
    MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);

    SetSCurve(&Joystick, JOYX, 0, 0, 0, 2, 0);
    SetSCurve(&Joystick, JOYY, 0, 0, 0, 2, 0);
    SetJCurve(&Throttle, THR_RIGHT, 80, 96);
    SetJCurve(&Throttle, THR_LEFT, 80, 96);
    SetSCurve(&Throttle, SCX, 0, 0, 0, 0, -4);
    SetSCurve(&Throttle, SCY, 0, 0, 0, 0, -4);
    SetSCurve(&Throttle, THR_FC, 0, 0, 0, 0, 0);

    // Joystick **************************************************************

    // Gun trigger
    MapKeyUMD(  &Joystick, TG1, Weapon_Fire,
                                PULSE+Smoke,
                                Weapon_Fire);
    // Weapons Release Button
    MapKeyIOUMD(&Joystick, S2,  Weapon_Release, Weapon_Release,
                                PULSE+Refueling_Bay, Fuel_Dump,
                                Weapon_Release, Weapon_Release);
    // Master Mode Control Button
    MapKeyIOUMD(&Joystick, S1,  PULSE+Launch_Permission_Override, PULSE+Cannon,
                                PULSE+HUD_Color,                  PULSE+HUD_Color,
                                PULSE+Launch_Permission_Override, PULSE+Cannon);
    // Nosewheel Steering Button
    MapKey(&Joystick, S3,       PULSE+Trim_Reset);

    // Target Management Switch
    MapKeyIO(&Joystick, H2U, PULSE+All_Labels, 0);             // ^
    MapKey(&Joystick, H2D, PULSE+CCRP_steering_mode);          // v
    MapKey(&Joystick, H2R, PULSE+Target_Designator_To_Center); // >
    MapKey(&Joystick, H2R, PULSE+RWR_SPO_Mode_Select);         // <

    // Data Management Switch
    MapKeyUMD(&Joystick, H3U, ZoomInCustom,    PULSE+_Next_Waypoint__Airfield_Or_Target,   ZoomInCustom);
    MapKeyUMD(&Joystick, H3D, ZoomOutCustom,   PULSE+_Next_Waypoint__Airfield_Or_Target,   ZoomOutCustom);
    MapKeyUMD(&Joystick, H3R, 0,               PULSE+_1__Navigation_Modes,                 0);
    MapKeyUMD(&Joystick, H3L, 0,               PULSE+_1__Navigation_Modes,                 0);

    // Countermeasures Management Switch
    MapKeyIO(&Joystick, H4P, PULSE+ECM, PULSE+TrackIR_center);
    MapKey(&Joystick, H4U, PULSE+Countermeasures_Continuously_Dispense);
    MapKey(&Joystick, H4D, PULSE+Countermeasures_Release);
    MapKey(&Joystick, H4L, PULSE+Countermeasures_Chaff_Dispense);
    MapKey(&Joystick, H4R, PULSE+Countermeasures_Flares_Dispense);

    // Trim Switch
    MapKey(&Joystick, H1U, Trim_Down);
    MapKey(&Joystick, H1D, Trim_Up);
    MapKeyIO(&Joystick, H1L, Trim_Left_Rudder, Trim_Left);
    MapKeyIO(&Joystick, H1R, Trim_Right_Rudder, Trim_Right);

    // Throttle **************************************************************

    // Mic Switch
    MapKeyIO(&Throttle, MSP, PULSE+TrackIR_pause, PULSE+Communication_menu);
    MapKeyIOUMD(&Throttle, MSU, 0, PULSE+Flight_Attack_air_defenses,    0, PULSE+Request_AWACS_Available_Tanker,
                                0, PULSE+Flight_Attack_air_defenses);
    MapKeyIOUMD(&Throttle, MSR, 0, PULSE+Attack_My_Target,              0, PULSE+Toggle_Formation,
                                0, PULSE+Attack_My_Target);
    MapKeyIOUMD(&Throttle, MSD, 0, PULSE+Flight_Attack_ground_targets,  0, PULSE+Request_AWACS_Home_Airbase,
                                0, PULSE+Flight_Attack_ground_targets);
    MapKeyIOUMD(&Throttle, MSL, 0, PULSE+Cover_Me,                      0, PULSE+Join_Up_Formation,
                                0, PULSE+Cover_Me);

    // Speedbrake
    MapKey(&Throttle, SPDF, AirbrakeOnCustom);
    MapKey(&Throttle, SPDM, AirbrakeOffCustom);
    MapKeyIO(&Throttle, SPDB, PULSE+Canopy_Open_Close,
                              AirbrakeOnCustom);

    // Boat Switch
    ModeAACustom  = CHAIN( PULSE+_6__Longitudinal_Missile_Aiming_Mode, D(), LedOn(1),  D(), LedOff(2));
    ModeAGCustom  = CHAIN( PULSE+_7__Air_To_Ground_Mode,               D(), LedOn(1),  D(), LedOn(2));
    ModeNavCustom = CHAIN( PULSE+_1__Navigation_Modes,                 D(), LedOff(1), D(), LedOff(2));

    MapKey(&Throttle, BSF, ModeAACustom);
    MapKey(&Throttle, BSB, ModeAGCustom);
    MapKey(&Throttle, BSM, ModeNavCustom);

    // China Hat
    MapKeyIOUMD(&Throttle, CHF, 0, PULSE+USB[7], 0, 0, 0, PULSE+USB[7]);
    MapKeyIOUMD(&Throttle, CHB, 0, PULSE+USB[7], 0, 0, 0, PULSE+USB[7]);

    // Coolie Switch
    MapKeyIOUMD(&Throttle, CSU, 0, 0,   0, 0,   PULSE+Salvo_Mode,   PULSE+PRS_SGL_Release_Submodes_Cycle);
    MapKeyIOUMD(&Throttle, CSD, 0, 0,   0, 0,   0,                  PULSE+Ripple_Quantity_Select);
    MapKeyIOUMD(&Throttle, CSR, 0, 0,   0, 0,   0,                  PULSE+Ripple_Interval_Increase);
    MapKeyIOUMD(&Throttle, CSL, 0, 0,   0, 0,   0,                  PULSE+Ripple_Interval_Decrease);

    // Slew Control
    MapKeyIO(&Throttle, SC, PULSE+Target_Unlock, PULSE+Target_Lock);

    // Left Throttle Button
    MapKeyUMD(&Throttle, LTB, PULSE+F8_Target_view, PULSE+F10_Theater_map_view, PULSE+F5_Ground_hostile_view);
    MapKeyRIO(&Throttle, LTB, 0, PULSE+F1_Cockpit_view);

    // Pinky Switch
    MapKeyIO(&Throttle, PSF, PULSE+Gear_Light_Near_Far_Off, PULSE+Navigation_lights);
    MapKeyIO(&Throttle, PSB, PULSE+Gear_Light_Near_Far_Off, PULSE+Illumination_Cockpit);
    MapKeyIO(&Throttle, PSM, PULSE+Gear_Light_Near_Far_Off, 0);

    // Flaps
    FlapsUpCustom      = CHAIN( PULSE+Flaps_Up,               D(), LedOff(4));
    FlapsDownCustom    = CHAIN( PULSE+Flaps_Up_Down,          D(), LedOn(4));
    FlapsLandingCustom = CHAIN( PULSE+Flaps_Landing_Position, D(), LedOn(4));

    MapKey(&Throttle, FLAPU, FlapsUpCustom);
    MapKey(&Throttle, FLAPM, FlapsDownCustom);
    MapKey(&Throttle, FLAPD, FlapsLandingCustom);

    // Landing Gear Horn Silence Button
    MapKeyIO(&Throttle, LDGH, PULSE+Gear_Light_Near_Far_Off, PULSE+Audible_Warning_Reset);

    // Throttle Friction Control
    LandingGearUpCustom   = CHAIN( PULSE+Landing_Gear_Up,   D(), LedOff(5));
    LandingGearDownCustom = CHAIN( PULSE+Landing_Gear_Down, D(), LedOn(5));

    KeyAxis(&Throttle, THR_FC, 0, AXMAP2( LIST( 0, 20, 80 ), LandingGearUpCustom, 0, LandingGearDownCustom));

    // APU Start
    //

    // Engine Operate
    MapKey(&Throttle, EOLIGN, EXEC("setEngine(Left, 1, 1);"));
    MapKey(&Throttle, EORIGN, EXEC("setEngine(Right, 1, 1);"));

    MapKey(&Throttle, EOLMOTOR, EXEC("setEngine(Left, 0);"));
    MapKey(&Throttle, EORMOTOR, EXEC("setEngine(Right, 0);"));

    // Engine Fuel Flow
    //

    // Idle
    MapKey(&Throttle,  IDLELON, EXEC("setEngine(Left,  0);"));
    MapKeyR(&Throttle, IDLELON, EXEC("setEngine(Left,  1);"));
    MapKey(&Throttle,  IDLERON, EXEC("setEngine(Right, 0);"));
    MapKeyR(&Throttle, IDLERON, EXEC("setEngine(Right, 1);"));

    // Throttle
    KeyAxis(&Throttle, THR_RIGHT, 0, AXMAP2( LIST( 0, 80, 81 ),
        LED(&Throttle, LED_INTENSITY, 43), 0,
        LED(&Throttle, LED_INTENSITY, 172)
    ));

    // EAC
    //

    // Autopilot Engage / Disengage
    AutopilotToggle = SEQ(EXEC("autopilotEngage();"), Autopilot_Disengage);
    MapKey(&Throttle, APENG, AutopilotToggle);

}

//
int EventHandle(int type, alias o, int x)
{
	DefaultMapping(&o, x);
}
